

import java.util.LinkedList;

import java.util.Queue;



class Athlete {

    String name;

    int age;

    int runningDistanceEachDay;



    public Athlete(String name, int age, int runningDistanceEachDay) {

        this.name = name;

        this.age = age;

        this.runningDistanceEachDay = runningDistanceEachDay;

    }

}



class QueueManager {

    private Queue<Athlete> queue;



    public QueueManager() {

        queue = new LinkedList<>();

    }



    public void enqueue(Athlete athlete) {

        queue.add(athlete);

    }



    public Athlete dequeue() {

        return queue.poll();

    }



    public boolean isEmpty() {

        return queue.isEmpty();

    }



    public int size() {

        return queue.size();

    }



    public Athlete peek() {

        return queue.peek();

    }

}


public class Main {

    public static void main(String[] args) {

        QueueManager athleteQueue = new QueueManager();



        // Enqueuing athletes

        Athlete athlete1 = new Athlete("Athlete 1", 25, 10);

        Athlete athlete2 = new Athlete("Athlete 2", 30, 8);
        Athlete athlete3 = new Athlete("Athlete 3", 28, 12);
        Athlete athlete4 = new Athlete("Athlete 4", 33, 7);
        Athlete athlete5 = new Athlete("Athlete 5", 18, 16);
        Athlete athlete6 = new Athlete("Athlete 6", 20, 14);
        Athlete athlete7 = new Athlete("Athlete 7", 32, 7);
        Athlete athlete8 = new Athlete("Athlete 8", 20, 15);
        Athlete athlete9 = new Athlete("Athlete 9", 20, 14);
        Athlete athlete10 = new Athlete("Athlete 10", 20, 13);

        athleteQueue.enqueue(athlete1);

        athleteQueue.enqueue(athlete2);
        athleteQueue.enqueue(athlete3);
        athleteQueue.enqueue(athlete4);
        athleteQueue.enqueue(athlete5);
        athleteQueue.enqueue(athlete6);
        athleteQueue.enqueue(athlete7);
        athleteQueue.enqueue(athlete8);
        athleteQueue.enqueue(athlete9);
        athleteQueue.enqueue(athlete10);



        System.out.println("Queue size: " + athleteQueue.size());



        // Dequeuing an athlete

        Athlete dequeuedAthlete = athleteQueue.dequeue();

        System.out.println("Dequeued athlete: " + dequeuedAthlete.name);



        // Checking if the queue is empty

        System.out.println("Is queue empty? " + athleteQueue.isEmpty());



        // Peeking at the front athlete

        Athlete frontAthlete = athleteQueue.peek();

        System.out.println("Front athlete: " + frontAthlete.name);



        Athlete dequeuedAthlete2 = athleteQueue.dequeue();

        System.out.println("Dequeued athlete: " + dequeuedAthlete2.name);

        // Checking if the queue is empty

        System.out.println("Is queue empty? " + athleteQueue.isEmpty());



    }

}
